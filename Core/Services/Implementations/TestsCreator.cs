using System.Collections.Generic;
using System.Linq;
using Core.Entities;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Core.Services.Implementations
{
    public class TestsCreator : ITestsCreator
    {
        private const string TestsPostfix = "Tests";
        private const string TestPostfix = "Test";
        private const string AutoGeneratedTemplate = "Assert.Fail(\"autogenerated\");";

        public IEnumerable<TestFile> Create(string fileContents)
        {
            var tree = CSharpSyntaxTree.ParseText(fileContents);
            var classDeclarationSyntaxes = tree.GetRoot().DescendantNodes()
                .OfType<ClassDeclarationSyntax>();

            var results = new List<TestFile>();
            foreach (var classDeclarationSyntax in classDeclarationSyntaxes)
            {
                var testClass = SyntaxFactory
                    .ClassDeclaration(classDeclarationSyntax.Identifier.ValueText + TestsPostfix)
                    .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword));

                var publicMethods = classDeclarationSyntax.DescendantNodes()
                    .OfType<MethodDeclarationSyntax>()
                    .Where(methodDeclarationSyntax => methodDeclarationSyntax.Modifiers.Any(SyntaxKind.PublicKeyword));

                var testAttribute = SyntaxFactory.Attribute(SyntaxFactory.ParseName(TestPostfix));
                var generatedTests = GetGeneratedMethods(publicMethods, testAttribute);
                foreach (var generatedTest in generatedTests) testClass = testClass.AddMembers(generatedTest);

                var usages = GetUsages();
                var unit = GetCompilationUnit(usages, testClass);

                results.Add(new TestFile($"{classDeclarationSyntax.Identifier.ValueText}Tests.cs",
                    unit.NormalizeWhitespace().ToFullString()));
            }

            return results;
        }

        private static IEnumerable<MethodDeclarationSyntax> GetGeneratedMethods(
            IEnumerable<MethodDeclarationSyntax> publicMethods, AttributeSyntax testAttribute)
        {
            return publicMethods
                .Select(syntax => syntax.Identifier.ValueText + TestPostfix)
                .Select(methodName =>
                    SyntaxFactory.MethodDeclaration(
                            SyntaxFactory.ParseTypeName("void"), methodName)
                        .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                        .AddBodyStatements(SyntaxFactory.ParseStatement(AutoGeneratedTemplate))
                        .AddAttributeLists(SyntaxFactory.AttributeList().AddAttributes(testAttribute))
                );
        }

        private static IEnumerable<UsingDirectiveSyntax> GetUsages()
        {
            return new List<UsingDirectiveSyntax>
            {
                SyntaxFactory.UsingDirective(
                    SyntaxFactory.QualifiedName(
                        SyntaxFactory.IdentifierName("NUnit"),
                        SyntaxFactory.IdentifierName("Framework"))
                )
            };
        }

        private static CompilationUnitSyntax GetCompilationUnit(IEnumerable<UsingDirectiveSyntax> usages,
            MemberDeclarationSyntax testClass)
        {
            return SyntaxFactory.CompilationUnit()
                .WithUsings(SyntaxFactory.List(usages))
                .AddMembers(
                    SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(TestsPostfix))
                        .AddMembers(testClass)
                );
        }
    }
}